'variables for use later'
SET columnAmount
SET floorAmount
SET elevatorAmount
SET elevPerColumn
SET minFloor
SET maxFloor
SET basementAmount
SET allFloors EQUAL TO floorAmount PLUS basementAmount

'Define battery class'
DEFINE battery USING ID AND columnAmount AND elevPerColumn AND minFloor AND maxFloor
    SET ID to _batteryID
    SET status TO batteryStatus
    SET columnsLog TO EMPTY

    SEQUENCE storeColumnsLog USING columnAmount AND elevPerColumn AND minFloor AND maxFloor
        FOR EACH columnAmount
            SET _ID TO 1
            ADD (ID, "Active", elevPerColumn, minFloor, maxFloor)TO columnsLog
            INCREMENT _ID BY 1
        ENDFOR
    ENDSEQUENCE

    CALL storeColumnsLog WITH columnAmount

    'Create METHOD to determine which columns handle which floors'
    SEQUENCE findFloorsPerColumn USING columnAmount AND floorAmount AND basementAmount AND minFloor AND maxFloor

        SET floorAmount EQUAL TO allFloors MINUS basementAmount

        IF basementAmount GREATER THAN zero THEN
            SET floorsPerColumn TO (floorAmount DIVIDED BY (columnAmount MINUS one))
        ELSE 
            SET floorsPerColumn TO (floorAmount DIVIDED BY columnAmount)
        ENDIF
        
        RETURN floorsPerColumn
    ENDSEQUENCE

    'Create METHOD to get leftover floors per column and their values'
    SEQUENCE setColumnVals 
       SET leftoverFloors

        IF basementAmount IS GREATER THAN zero THEN
            SET leftoverFloors EQUAL TO floorAmount DIVIDED BY (columnAmount MINUS one)
        ELSE 
            SET leftoverFloors EQUAL TO floorAmount DIVIDED BY columnAmount
        ENDIF
    
        'set min and max floor of each column'
        CALL setMinMaxColumns

        'adjust grouped floors of column if there are still leftover floors'
        IF leftoverFloors IS NOT EQUAL TO zero THEN
            SET maxFloor EQUAL TO minFloor PLUS leftoverFloors
            SET groupedFloors EQUAL TO floorsPerColumn PLUS leftoverFloors
        ENDIF
        'make first column serve basement'
        IF basementAmount IS GREATER THAN zero THEN
            CALL determineBasementControl
        ENDIF
        'Create METHOD to determine min and max floor of basement column'
        SEQUENCE determineBasementControl
            SET groupedFloors EQUAL TO basementAmount PLUS one
            SET minFloor EQUAL TO basementAmount MULTIPLIED BY negative one'negative value since under ground'
            SET maxFloor EQUAL TO one
        ENDSEQUENCE
        'Create METHOD to determine min and max floor of everything except basement'
        SEQUENCE setMinMaxColumns
            SET minFloor EQUAL TO one
            FOR EACH columnsLog
                SET ID TO 1
                IF ID IS EQUAL TO 1 THEN
                    SET groupedFloors EQUAL TO floorsPerColumn
                ELSE
                    SET groupedFloors EQUAL TO floorsPerColumn plus one 
                ENDIF
            SET minFloor OF THIS columnsLog EQUAL TO minFloor
            SET maxFloor OF THIS columnsLog EQUAL TO maxFloor plus floorsPerColumn minus one
            SET minFloor EQUAL TO THIS maxFloor plus one
            INCREMENT ID BY 1
        ENDFOR
        ENDSEQUENCE
    ENDSEQUENCE
ENDDEFINE

'Define column class'
DEFINE Column USING _columnID AND floorAmount AND columnStatus AND elevatorAmount
    SET ID TO _columnID
    SET floorAmount TO floorAmount
    SET status TO columnStatus 'idle or used'
    SET elevatorAmount TO elevatorAmount
    SET groupedFloors TO groupedFloors
    SET upButtonLog TO EMPTY
    SET downButtonLog TO EMPTY
    SET elevatorLog TO EMPTY

    CALL storeElevatorLog
    CALL storeUpButtonLog
    CALL storeDownButtonLog

    'Create METHOD to store amount of elevators'
    SEQUENCE storeElevatorLog USING elevatorAmount
        FOR EACH elevatorAmount
            SET ID TO 1
            ADD (ID, Idle, 1, Closed, floorAmount) TO elevatorLog
            INCREMENT ID by 1
        ENDFOR
    ENDSEQUENCE
    'Create METHOD to store amount of upButtons'
    SEQUENCE storeUpButtonLog USING floorAmount
        FOR EACH elevatorAmount
            SET ID TO 1
            IF ID NOT EQUAL TO highestFloor THEN
                ADD (ID) TO upButtonLog
            ENDIF
            INCREMENT ID by 1
        ENDFOR
    ENDSEQUENCE
    'Create METHOD to store amount of downButtons'
    SEQUENCE storeDownButtonLog USING floorAmount
        FOR EACH elevatorAmount
            SET ID TO 1
            IF ID GREATER THAN lowestFloor THEN
                ADD (ID) TO downButtonLog
            ENDIF
            INCREMENT ID by 1
        ENDFOR
    ENDSEQUENCE
    'Create METHOD to choose elevator to send based of curent movement direction or idleness'
    SEQUENCE chooseElevator USING floor AND direction AND elevatorLog of columnN
        SET bestElevator 
        SET ActiveElevatorLog TO EMPTY
        SET IdleElevatorLog TO EMPTY
        SET sameDirElevatorLog TO EMPTY

        FOR EACH elevatorN IN elevatorLog
            IF elevatorN IS NOT Idle AND elevatorN status IS EQUAL TO direction THEN
                IF (elevatorN status IS "UP" AND elevatorN floor IS LESS THAN Floor OR elevatorN status IS "DOWN" AND elevatorN floor IS GREATER THAN currentFloor) THEN
                    ADD elevatorN TO ActiveElevatorLog
                ENDIF
            ELSE 
                ADD elevatorN TO IdleElevatorLog
            ENDIF
        ENDFOR

        IF ActiveElevatorLog IS not EMPTY THEN
            SET sameDirElevatorLog EQUAL TO ActiveElevatorLog WITH SAME direction
        ENDIF

        IF sameDirElevatorLog IS NOT EMPTY THEN
            CALL determineCloseElevator USING sameDirElevatorLog AND floor
        ELSE 
            CALL determineCloseElevator USING IdleElevatorLog AND floor
        ENDIF

        RETURN bestElevator 
        
    ENDSEQUENCE

    'Create METHOD to determine closest elevator using array'
    SEQUENCE determineCloseElevator USING closestArray
        SET closeElevator TO FIRST elevator OF closestArray
        SET travelScore EQUAL TO (closeElevator floor MINUS currentFloor)
        FOR EACH elevatorN IN closestArray
            IF ((elevatorN floor MINUS currentFloor) IS LESS THAN travelScore) THEN
                SET closeElevator TO elevatorN
            ENDIF
        ENDFOR

        RETURN bestElevator 
    ENDSEQUENCE
ENDDEFINE 
'Define elevator class'
DEFINE Elevator USING id AND floorAmount AND _floor AND elevatorStatus
    SET ID TO _elevatorID
    SET Floor TO _floor 
    SET Status TO elevatorStatus 'Idle or Moving Up or Moving Down '
    SET elevatorDoor 
    SET pitStop TO EMPTY 'contains amount of stops requested of an elevator'
    SET interiorButtons TO EMPTY

    'create METHOD to store amount of stops requested for elevator'
    SEQUENCE storePitStop
        FOR EACH elevatorAmount
            SET ID TO 1
            ADD TO pitStop
            INCREMENT ID by 1
        ENDFOR
    ENDSEQUENCE
    'create METHOD to store amount of buttons inside each elevator'
    SEQUENCE storeInteriorButtons
        FOR EACH elevatorAmount
            SET ID TO 1
            ADD TO interiorButtons
            INCREMENT ID by 1
        ENDFOR
    ENDSEQUENCE
    
    'create METHOD to move elevators'
    SEQUENCE moveElevators USING elevator AND requestedFloor AND requestedColumn
        WHILE pitStop NOT EQUAL zero
            IF elevatorStatus IS Idle THEN 
                IF _floor LESS THAN requestedFloor THEN
                    SET status TO "Moving Down"
                ELSE 
                    SET status to "Moving Up"
                ENDIF 
            ENDIF   
    ENDSEQUENCE

    'move elevators up'
    SEQUENCE moveUp USING elevator
        FOR EACH floorN IN pitStop
            MOVE elevator UP 
            SET _floor OF elevator to floorN
            CALL updateFloorDisplay
        ENDFOR

        IF pitStop IS EMPTY THEN
            SET status TO "IDLE"
        ELSE
            SET status TO "Moving Up"
        ENDIF
    ENDSEQUENCE

    'move elevators down'
    SEQUENCE moveDown USING elevator
        FOR EACH floorN IN pitStop
            MOVE elevator DOWN 
            SET _floor OF elevator to floorN
            CALL updateFloorDisplay
        ENDFOR

        IF pitStop IS EMPTY THEN
            SET status TO "IDLE"
        ELSE
            SET status TO "Moving Down"
        ENDIF
    ENDSEQUENCE

    'updateFloorDisplay'
    SEQUENCE updateFloorDisplay USING floorDisplay AND floor
        FOR EACH display IN floorDisplay
            DISPLAY floor
        ENDFOR
    ENDSEQUENCE

    'add open and close doors METHOD'
    SEQUENCE openDoor USING elevator AND floor AND door
    IF status IS "Idle" THEN
        SET status TO "Open"
    ELSE
        SET status TO "Closed"
    ENDIF
    ENDSEQUENCE
    'add floor to list for button press'
    SEQUENCE addFloorToList USING elevator AND floor
        Add floor TO pitStop OF elevator
        SORT pitStop OF elevator TO ascending
    ENDSEQUENCE
ENDDEFINE
'------------------------------------------------------------------------------------------'
'Define door class'
DEFINE door
    SET ID TO _doorID
    SET Status TO doorStatus 'open or closed'
    SET floor TO floor
ENDDEFINE

'Define floor request button class'
DEFINE Floor request button
    SET ID TO _buttonID
    SET Status TO buttonStatus 'pressed or idle'
    SET floor TO floor
ENDDEFINE

'Define floor display class'
DEFINE floorDisplay
    SET ID TO _displayID
    SET Status TO displayStatus
    SET floor TO floor
ENDDEFINE

'On elevator request outside elevator'
SEQUENCE elevatorRequest USING currentFloor AND buttonDir
    READ currentFloor AND buttonDir
    IF buttonDir IS up THEN 
        SET requestButton OF upButtonLog TO "active"
    ELSE
        SET requestButton OF downButtonLog TO "active"
    ENDIF

    CALL chooseElevator WITH buttonDir AND elevatorLog AND currentFloor
    CALL addFloorToList WITH bestElevator AND currentFloor AND pitStop
    CALL moveElevators WITH bestElevator AND pitStop AND currentFloor
ENDSEQUENCE

'On floot request inside elevator'
SEQUENCE floorRequest USING requestedFloor AND elevator
    READ requestedFloor AND buttonDir
    IF buttonDir is up THEN
        SET requestButton OF upButtonLog TO "active"
    ELSE 
        SET requestButton OF downButtonLog TO "active"
    ENDIF

    CALL addFloorToList WITH requestedFloor AND elevator
    CALL moveElevators WITH elevator AND pitStop AND requestedFloor
ENDSEQUENCE

'------------------------------------------------------------------------------------------'
'Define buttonDir enum'
Define buttonDir
    SET up TO "up"
    SET down TO "down"
ENDDEFINE
'------------------------------------------------------------------------------------------'
'Initiate section'
DEFINE systemStart USING floorAmount AND elevatorAmount AND columnAmount
    FOR EACH columnAmount
        SET ID TO 1
        INSTANTIATE columnN WITH ID AND floorAmount AND elevatorAmount
        INCREMENT ID by 1
    ENDFOR
ENDDEFINE
